// <auto-generated />
using System;
using Entities.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebAPI.Migrations
{
    [DbContext(typeof(RepoContext))]
    [Migration("20210629095317_JeuDonneesUsersCorrection")]
    partial class JeuDonneesUsersCorrection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Carburant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_CA");

                    b.Property<string>("CodeEu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carburants");
                });

            modelBuilder.Entity("Entities.Models.Marque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_MA");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marque");
                });

            modelBuilder.Entity("Entities.Models.Releve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_RE");

                    b.Property<Guid>("CarburantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("StationServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarburantId");

                    b.HasIndex("StationServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Releves");
                });

            modelBuilder.Entity("Entities.Models.StationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_ST");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MarqueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MarqueId");

                    b.ToTable("StationServices");
                });

            modelBuilder.Entity("Entities.Models.StationServiceCarburant", b =>
                {
                    b.Property<Guid>("CarburantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarburantId", "StationServiceId");

                    b.HasIndex("StationServiceId");

                    b.ToTable("StationServiceCarburants");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_US");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e1d2a85-c5ff-4b31-88cc-d4fd7e7a1338"),
                            Login = "ced@test.com",
                            Password = "test",
                            Pseudo = "Ced"
                        },
                        new
                        {
                            Id = new Guid("26a3a18c-56f1-4723-8052-4de25e8637b3"),
                            Login = "vince@test.com",
                            Password = "test",
                            Pseudo = "Vincent"
                        },
                        new
                        {
                            Id = new Guid("b68d837a-f541-428e-892a-4b854a78d755"),
                            Login = "charlotte@test.com",
                            Password = "test",
                            Pseudo = "Charlotte"
                        },
                        new
                        {
                            Id = new Guid("65fe75f0-8991-472b-9533-65cd78596f2e"),
                            Login = "theo@test.com",
                            Password = "test",
                            Pseudo = "Théo"
                        },
                        new
                        {
                            Id = new Guid("65fe75f0-8991-472b-9533-65cd78596f2f"),
                            Login = "ali@test.com",
                            Password = "test",
                            Pseudo = "Ali"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserFavouritesStationsServices", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FavouriteStationsServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FavouriteStationsServiceId");

                    b.HasIndex("FavouriteStationsServiceId");

                    b.ToTable("UserFavouritesStationsServices");
                });

            modelBuilder.Entity("Entities.Models.Releve", b =>
                {
                    b.HasOne("Entities.Models.Carburant", "Carburant")
                        .WithMany()
                        .HasForeignKey("CarburantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.StationService", "StationService")
                        .WithMany("Releves")
                        .HasForeignKey("StationServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Releves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carburant");

                    b.Navigation("StationService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.StationService", b =>
                {
                    b.HasOne("Entities.Models.Marque", "Marque")
                        .WithMany("StationServices")
                        .HasForeignKey("MarqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marque");
                });

            modelBuilder.Entity("Entities.Models.StationServiceCarburant", b =>
                {
                    b.HasOne("Entities.Models.Carburant", "Carburant")
                        .WithMany("StationServiceCarburants")
                        .HasForeignKey("CarburantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.StationService", "StationService")
                        .WithMany("StationServiceCarburants")
                        .HasForeignKey("StationServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carburant");

                    b.Navigation("StationService");
                });

            modelBuilder.Entity("Entities.Models.UserFavouritesStationsServices", b =>
                {
                    b.HasOne("Entities.Models.StationService", "FavouriteStationsService")
                        .WithMany()
                        .HasForeignKey("FavouriteStationsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("StationServicesFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouriteStationsService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Carburant", b =>
                {
                    b.Navigation("StationServiceCarburants");
                });

            modelBuilder.Entity("Entities.Models.Marque", b =>
                {
                    b.Navigation("StationServices");
                });

            modelBuilder.Entity("Entities.Models.StationService", b =>
                {
                    b.Navigation("Releves");

                    b.Navigation("StationServiceCarburants");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Releves");

                    b.Navigation("StationServicesFavourites");
                });
#pragma warning restore 612, 618
        }
    }
}
